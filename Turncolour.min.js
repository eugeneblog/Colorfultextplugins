;(function(){
    var ChangeColor = function(selector , automatic){

        var selector = selector || 0;
        return new Init(selector , automatic);    

    }

    var fn = {
        randomColor:function(num){             //随机颜色
            num = num || 256;
            return '#'+Math.floor(Math.random()*num).toString(16);
        },
        addTag:function(str){    //添加标签
            var i , len = str.length || str;
            var newStr = ' ';
            for(i = 0 ; i < len ; i ++ ){
                newStr += '<b style = "color:'+ this.randomColor(0xffffff) +'">'+str[i]+'</b>';
            }    
            
            return newStr;
        },
        textAnimation:function(obj , val){
            var time = null;
            var me = this;
            var len = obj.length;
            console.log(len);
            console.log(obj[0])
            if(len == 1){
                time && clearInterval(time);
                time = setInterval(function(){
                    obj.newNode[0] = me.addTag(obj[0].innerText)
                    obj[0].innerHTML = obj.newNode[0];
                },val)
            }else{
                
            }
        }
    }

    var Init = function(selector , automatic){   //初始化构造函数
        var me = this;
        automatic = automatic || false;
        if(!selector){

            throw 'Please check your selectored !!!';

        }else{

            var slice = Array.prototype.slice;  //获取slice函数
            var dom = slice.call(document.querySelectorAll(selector)),i,textNode = new Array , newNode = new Array;  //获取DOM对象，并转化成数组对像
            var len = dom ? dom.length : 0 ; 
            for( i = 0 ; i < len ; i++ ){  

                textNode[i] = dom[i].innerText;    //遍历
                this[i] = dom[i];
                newNode[i] = this.addTag(this[i].innerText); //给每个字符添加标签
                
                this[i].innerHTML = newNode[i];

            }
            this.newNode = newNode;
            this.textNode = textNode;
            this.length = len;
            this.selector = selector;


            if(!automatic){

                return

            }else{
                
                this.textAnimation(this , 500 );
                
            }

        }

    }

    Init.prototype = fn;   //实现继承

    window.ChangeColor = ChangeColor;  //暴露变量方便全局调用

})(window)